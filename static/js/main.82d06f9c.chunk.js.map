{"version":3,"sources":["Components/SearchForm.js","Components/Gif.js","Components/NoGifs.js","Components/GifList.js","Components/App.js","index.js"],"names":["SearchForm","props","useState","searchText","setSearchText","className","onSubmit","e","preventDefault","onSearch","currentTarget","reset","htmlFor","type","onChange","target","value","console","log","name","placeholder","id","Gif","src","url","alt","NoGifs","GifList","gifs","results","data","length","map","gif","images","fixed_height","key","App","setData","query","setQuery","isLoading","setIsLoading","useEffect","Axios","then","response","catch","error","finally","search","ReactDOM","render","document","getElementById"],"mappings":"oPA+BeA,MA7Bf,SAAoBC,GAElB,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACE,0BAAMC,UAAU,cAAcC,SAPX,SAACC,GACpBA,EAAEC,iBACFP,EAAMQ,SAASN,GACfI,EAAEG,cAAcC,UAKd,2BAAON,UAAU,YAAYO,QAAQ,UAArC,UACA,2BAAOC,KAAK,SACVC,SAhBiB,SAACP,GAEtBH,EAAcG,EAAEQ,OAAOC,OACvBC,QAAQC,IAAIf,IAcRgB,KAAK,SACLC,YAAY,cAEd,4BAAQP,KAAK,SAASQ,GAAG,SAAShB,UAAU,iBAAgB,uBAAGA,UAAU,6BAAb,aClBnDiB,EANH,SAAArB,GAAK,OACf,wBAAII,UAAU,YACZ,yBAAKkB,IAAKtB,EAAMuB,IAAKC,IAAI,OCKdC,EAPA,SAAAzB,GAAK,OAClB,wBAAII,UAAU,WACZ,uBAAGA,UAAU,2BAAb,+BACA,mECgBWsB,EAjBC,SAAA1B,GAEd,IACI2B,EADEC,EAAU5B,EAAM6B,KAQtB,OALEF,EADEC,EAAQE,OACHF,EAAQG,KAAI,SAAAC,GAAG,OAAI,kBAAC,EAAD,CAAKT,IAAKS,EAAIC,OAAOC,aAAaX,IAAKY,IAAKH,EAAIZ,QAEnE,kBAAC,EAAD,MAIP,wBAAIhB,UAAU,YACXuB,ICuBQS,MAhCf,WAEE,MAAwBnC,mBAAS,IAAjC,mBAAO4B,EAAP,KAAaQ,EAAb,KACA,EAA0BpC,mBAAS,QAAnC,mBAAOqC,EAAP,KAAcC,EAAd,KACA,EAAkCtC,oBAAS,GAA3C,mBAAOuC,EAAP,KAAkBC,EAAlB,KAaA,OAPAC,qBAAW,WACTC,IAAM,0CAAD,OAA2CL,EAA3C,uDACFM,MAAK,SAAAC,GAAQ,OAAIR,EAAQQ,EAAShB,KAAKA,SACvCiB,OAAM,SAAAC,GAAK,OAAI/B,QAAQC,IAAI,kCAAmC8B,MAC9DC,SAAQ,kBAAMP,GAAa,QAC7B,CAACH,IAGF,oCACE,yBAAKlC,UAAU,eACb,yBAAKA,UAAU,SACb,wBAAIA,UAAU,cAAd,aACA,kBAAC,EAAD,CAAYI,SAhBE,SAACyC,GAAD,OAAYV,EAASU,QAmBvC,yBAAK7C,UAAU,gBACZoC,EAAY,yCAAoB,kBAAC,EAAD,CAASX,KAAMA,OC7BxDqB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.82d06f9c.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nfunction SearchForm(props) {\n\n  const [searchText, setSearchText] = useState('');\n\n  const onSearchChange = (e) => { \n    // Update state\n    setSearchText(e.target.value);\n    console.log(searchText); \n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    props.onSearch(searchText);\n    e.currentTarget.reset();\n  }\n\n  return (\n    <form className=\"search-form\" onSubmit={handleSubmit}>\n      <label className=\"is-hidden\" htmlFor=\"search\">Search</label>\n      <input type=\"search\"\n        onChange={onSearchChange}\n        name=\"search\"\n        placeholder=\"Search...\"\n      />\n      <button type=\"submit\" id=\"submit\" className=\"search-button\"><i className=\"material-icons icn-search\">search</i></button>\n    </form>\n  );\n}\n\nexport default SearchForm;","import React from 'react';\n\nconst Gif = props => (\n  <li className=\"gif-wrap\">\n    <img src={props.url} alt=\"\"/>\n  </li>\n);\n\nexport default Gif;","import React from 'react';\n\nconst NoGifs = props => (\n  <li className='no-gifs'>\n    <i className=\"material-icons icon-gif\">sentiment_very_dissatisfied</i>\n    <h3>Sorry, no GIFs match your search.</h3>\n  </li>\n);\n\nexport default NoGifs;","import React from 'react';\nimport Gif from './Gif';\nimport NoGifs from './NoGifs';\n\nconst GifList = props => { \n  \n  const results = props.data;\n  let gifs;\n  if (results.length) {\n    gifs = results.map(gif => <Gif url={gif.images.fixed_height.url} key={gif.id} />);    \n  } else {\n    gifs = <NoGifs />\n  }\n\n  return(\n    <ul className=\"gif-list\">\n      {gifs}\n    </ul> \n  );\n}\n\nexport default GifList;\n","import React, {useState, useEffect} from 'react'\nimport '../App.css';\nimport Axios from 'axios';\n\nimport SearchForm from './SearchForm';\nimport GifList from './GifList';\n\nfunction App() {\n\n  const [data, setData] = useState([]); // declare state for data fetch value\n  const [query, setQuery] = useState('cats'); // declare new state for search value\n  const [isLoading, setIsLoading] = useState(true); // declare a new state for loading state value\n\n  const performSearch = (search) => setQuery(search);\n\n  // Data fetch calls in promise change\n  // \n  useEffect( () => { \n    Axios(`https://api.giphy.com/v1/gifs/search?q=${query}&limit=24&api_key=tD4vO9cKUlwLSwaSawgGjSeO4yBmmYoK`)\n      .then(response => setData(response.data.data))\n      .catch(error => console.log('Error fetching and parsing data', error))\n      .finally(() => setIsLoading(false))\n  }, [query]);\n\n  return (\n    <>\n      <div className=\"main-header\">\n        <div className=\"inner\">\n          <h1 className=\"main-title\">GifSearch</h1>\n          <SearchForm onSearch={performSearch}/>\n        </div>\n      </div>\n      <div className=\"main-content\">\n        {isLoading ? <p>Loading...</p> : <GifList data={data} /> }\n      </div>\n    </>\n  );\n}\n\nexport default App\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}